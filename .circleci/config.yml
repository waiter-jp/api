version: 2
jobs:
  build:
    # The primary container is an instance of the first list image listed. Your build commands run in this container.
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run:
          name: node version
          command: node -v
      - run:
          name: npm version
          command: npm -v
      # - run:
      #     name: Update npm
      #     command: 'sudo npm install -g npm@latest'
      # - run:
      #     name: configure npm for private modules
      #     command: |
      #       npm config set //registry.npmjs.org/:_authToken=$NPM_TOKEN
      #       npm whoami
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install npm packages
          command: npm ci
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: compile typescript
          command: npm run build
  test:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: run npm test
          command: npm test
      # - run:
      #     name: Generate code coverage
      #     command: './node_modules/.bin/nyc report --reporter=text-lcov'
      # - store_artifacts:
      #     path: test-results.xml
      #     prefix: tests
      # - store_artifacts:
      #     path: coverage
      #     prefix: coverage
  doc:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Generate docs
          command: |
            npm run build
            npm run doc
  deploy2development:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Dump Google Cloud Credentials to file
          command: echo ${GOOGLE_AUTH} > ~/gcp-key.json
    #   - run:
    #       name: Set NPM_TOKEN
    #       command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ./.npmrc
      - run:
          name: Prepare app.yaml
          command: |
            echo "runtime: nodejs" >> ./app.yaml
            echo "env: flex" >> ./app.yaml
            echo "env_variables:" >> ./app.yaml
            echo "  NODE_ENV: 'development'" >> ./app.yaml
            echo "  WAITER_PASSPORT_ISSUER: '${WAITER_PASSPORT_ISSUER_DEVELOPMENT}'" >> ./app.yaml
            echo "  WAITER_SECRET: '${WAITER_SECRET_DEVELOPMENT}'" >> ./app.yaml
            echo "  TOKEN_EXPIRES_IN: '${TOKEN_EXPIRES_IN_DEVELOPMENT}'" >> ./app.yaml
            echo "  INITIALIZE_IN_MEMORY_DATA_INTERVAL: '${INITIALIZE_IN_MEMORY_DATA_INTERVAL_DEVELOPMENT}'" >> ./app.yaml
            echo "  MONGOLAB_URI: '${MONGOLAB_URI_DEVELOPMENT}'" >> ./app.yaml
            echo "  REDIS_HOST: '${REDIS_HOST_DEVELOPMENT}'" >> ./app.yaml
            echo "  REDIS_PORT: ${REDIS_PORT_DEVELOPMENT}" >> ./app.yaml
            echo "  REDIS_KEY: '${REDIS_KEY_DEVELOPMENT}'" >> ./app.yaml
      - run:
          name: List files
          command: ls -la
      - run:
          name: Deploy to GCP app engine
          command: |
            # gcloud --quiet components update
            gcloud auth activate-service-account --key-file ~/gcp-key.json
            gcloud config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet app deploy ./app.yaml
  prerelease:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Dump Google Cloud Credentials to file
          command: echo ${GOOGLE_AUTH_TEST} > ~/gcp-key.json
      - run:
          name: Prepare app.yaml
          command: |
            echo "runtime: nodejs" >> ./app.yaml
            echo "env: flex" >> ./app.yaml
            echo "env_variables:" >> ./app.yaml
            echo "  NODE_ENV: 'test'" >> ./app.yaml
            echo "  WAITER_PASSPORT_ISSUER: '${WAITER_PASSPORT_ISSUER_TEST}'" >> ./app.yaml
            echo "  WAITER_SECRET: '${WAITER_SECRET_TEST}'" >> ./app.yaml
            echo "  TOKEN_EXPIRES_IN: '${TOKEN_EXPIRES_IN_TEST}'" >> ./app.yaml
            echo "  INITIALIZE_IN_MEMORY_DATA_INTERVAL: '${INITIALIZE_IN_MEMORY_DATA_INTERVAL_TEST}'" >> ./app.yaml
            echo "  MONGOLAB_URI: '${MONGOLAB_URI_TEST}'" >> ./app.yaml
            echo "  REDIS_HOST: '${REDIS_HOST_TEST}'" >> ./app.yaml
            echo "  REDIS_PORT: ${REDIS_PORT_TEST}" >> ./app.yaml
            echo "  REDIS_KEY: '${REDIS_KEY_TEST}'" >> ./app.yaml
      - run:
          name: List files
          command: ls -la
      - run:
          name: Deploy to GCP app engine
          command: |
            # gcloud --quiet components update
            gcloud auth activate-service-account --key-file ~/gcp-key.json
            gcloud config set project ${GOOGLE_PROJECT_ID_TEST}
            gcloud --quiet app deploy ./app.yaml
  deploy:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Dump Google Cloud Credentials to file
          command: echo ${GOOGLE_AUTH_PRODUCTION} > ~/gcp-key.json
      - run:
          name: Prepare app.yaml
          command: |
            echo "runtime: nodejs" >> ./app.yaml
            echo "env: flex" >> ./app.yaml
            echo "env_variables:" >> ./app.yaml
            echo "  NODE_ENV: 'production'" >> ./app.yaml
            echo "  WAITER_PASSPORT_ISSUER: '${WAITER_PASSPORT_ISSUER_PRODUCTION}'" >> ./app.yaml
            echo "  WAITER_SECRET: '${WAITER_SECRET_PRODUCTION}'" >> ./app.yaml
            echo "  TOKEN_EXPIRES_IN: '${TOKEN_EXPIRES_IN_PRODUCTION}'" >> ./app.yaml
            echo "  INITIALIZE_IN_MEMORY_DATA_INTERVAL: '${INITIALIZE_IN_MEMORY_DATA_INTERVAL_PRODUCTION}'" >> ./app.yaml
            echo "  MONGOLAB_URI: '${MONGOLAB_URI_PRODUCTION}'" >> ./app.yaml
            echo "  REDIS_HOST: '${REDIS_HOST_PRODUCTION}'" >> ./app.yaml
            echo "  REDIS_PORT: ${REDIS_PORT_PRODUCTION}" >> ./app.yaml
            echo "  REDIS_KEY: '${REDIS_KEY_PRODUCTION}'" >> ./app.yaml
      - run:
          name: List files
          command: ls -la
      - run:
          name: Deploy to GCP app engine
          command: |
            # gcloud --quiet components update
            gcloud auth activate-service-account --key-file ~/gcp-key.json
            gcloud config set project ${GOOGLE_PROJECT_ID_PRODUCTION}
            gcloud --quiet app deploy ./app.yaml
# Used for orchestrating all jobs.
workflows:
  version: 2

  build-test-doc:
    jobs:
      - build
      - test:
          requires:
            - build
      - doc:
          requires:
            - test
      # - deploy2development:
      #     requires:
      #       - doc
      #     filters:
      #       branches:
      #         only: develop
      # - prerelease:
      #     requires:
      #       - doc
      #     filters:
      #       branches:
      #         only: /feature\/.+-alpha.+/
      # - deploy:
      #     requires:
      #       - doc
      #     filters:
      #       branches:
      #         only: master

